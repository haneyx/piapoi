<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta autor="Ing.HaroldCoilaV.">
    <title>Tabla Interactiva</title>
    <link href="https://fonts.googleapis.com/css2?family=Nunito:wght@200;400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/css/anexo.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>   
<script>
$(document).ready(function() {
    // Obtener el valor de 'eess' desde la sesión o desde el backend
    var eess = "{{ $eess }}";  // Asegúrate de que $eess está disponible en la vista

    // Realizar la solicitud AJAX cuando la página cargue
    $.ajax({
        url: '/obtener-datos1',  // URL configurada en las rutas
        method: 'GET',
        data: { eess: eess },  // Enviar el valor de 'eess'
        success: function(data) {
            var eessData = data[0];
            document.getElementById('inp1').value = eessData.oodd;  // Asignar 'oodd' al campo inp1
            document.getElementById('inp2').value = eessData.eess;
        },
        error: function(error) {
            console.error("Error al obtener los datos:", error);
        }
    });
});
</script>
<div class="top">

    <div class="izquierda">
        Sesión Activa
        <button id="salir" type="submit" onclick="window.history.go(-1); return false;">Salir</button>
    </form>
    </div>
    <div class="titulo">PROYECCIÓN PRESUPUESTAL 2026</div>
    <div class="derecha">
        <!--button id="actua">Actualizar</button-->
        <button id="graba">Grabar</button>
    </div>
</div>

<div class="cabezaOODD">
    <div class="form-group">
        <label for="organo-desconcentrado" style="background:#fff9d9;">Órgano Desconcentrado:</label>
        <input type="text" id="inp1" value="{{ $usuario_oodd }}" readonly>
    </div>

    <div class="form-group">
        <label for="establecimiento-salud" style="background:#cde3ff;">Establecimiento de Salud:</label>
        <input type="text" id="inp2" value="{{ $usuario_eess }}"  readonly>
    </div>

    <div class="form-group">
        <label for="cod-centro-gestor-2" style="background:#ebf4ff;">Cod. Centro Gestores:</label>
        <input type="text" id="inp3" value="{{ $usuario_eess_codigo }}" readonly>
    </div>
    <p> // Un anexo por cada actividad y uno consolidado [Hoja activa: {{ $usuario_hojabloqueo }}]</p>
</div>

    <table>
        <thead>
            <tr>
                <th>ID</th>
                <th>Fondo</th>
                <th>POFI Código</th>
                <th>Estimación</th>
                <th>Enero</th>
                <!-- Otros campos -->
            </tr>
        </thead>
        <tbody>
            @foreach($fila as $row)
                <tr>
                    <td>{{ $row->id }}</td>
                    <td>{{ $row->fondo_codigo }}</td>
                    <td>{{ $row->pofi_codigo }}</td>
                    <td>{{ $row->estimacion }}</td>
                    <td>{{ $row->enero }}</td>
                    <!-- Otros campos -->
                </tr>
            @endforeach
        </tbody>
    </table>
    -----------------
    <div class="detalle">
    <table border="1" id="detallesTable">
        <thead>
            <tr>
                <th>Fondo Financiero</th>
                <th>Cod. PoFi</th>
                <th>Posición Presupuestaria</th>
                <th>Tipo Gasto</th>
                <th>Estimación del<br>Presupuesto 2025</th>
                <th>Enero</th>
                <th>Febrero</th>
                <th>Marzo</th>
                <th>Abril</th>
                <th>Mayo</th>
                <th>Junio</th>
                <th>Julio</th>
                <th>Agosto</th>
                <th>Setiembre</th>
                <th>Octubre</th>
                <th>Noviembre</th>
                <th>Diciembre</th>
                <th>Total<br>2026</th>
                <th>Proyección<br>Año 2027</th>
                <th>Proyección<br>Año 2028</th>
                <th>Proyección<br>Año 2029</th>
            </tr>
        </thead>
        <tbody>
            <!-- Aquí se agregarán las filas dinámicamente -->
        </tbody>
        <tfoot>
<tr>
    <td colspan="21" style="height: 20px; background-color: white; border-top: 2px solid #d0d0d0; border-bottom: 2px solid #d0d0d0;"></td>
</tr>

        <tr>
            <td></td>
            <td></td>
            <td>GASTO DE PERSONAL</td>
            <td><input type="number" value="153.0"></td>
            <td><input type="number" value="153.0"></td>
            <td><input type="number" value="153.0"></td>
            <td><input type="number" value="153.0"></td>
            <td><input type="number" value="153.0"></td>
            <td><input type="number" value="153.0"></td>
            <td><input type="number" value="153.0"></td>
            <td><input type="number" value="153.0"></td>
            <td><input type="number" value="153.0"></td>
            <td><input type="number" value="153.0"></td>
            <td><input type="number" value="1360.0"></td>
            <td><input type="number" value="1980.0"></td>
            <td><input type="number" value="2720.0"></td>
            <td><input type="number" value="1360.0"></td>
            <td><input type="number" value="1980.0"></td>
            <td><input type="number" value="2720.0"></td>
            <td><input type="number" value="2720.0"></td>
            <td><input type="number" value="2720.0"></td>
        </tr>
        <tr>
            <td></td>
            <td></td>
            <td>GASTO DE PERSONAL 2</td>
            <td><input type="number" value="153.0"></td>
            <td><input type="number" value="153.0"></td>
            <td><input type="number" value="153.0"></td>
            <td><input type="number" value="153.0"></td>
            <td><input type="number" value="153.0"></td>
            <td><input type="number" value="153.0"></td>
            <td><input type="number" value="153.0"></td>
            <td><input type="number" value="153.0"></td>
            <td><input type="number" value="153.0"></td>
            <td><input type="number" value="153.0"></td>
            <td><input type="number" value="1360.0"></td>
            <td><input type="number" value="1980.0"></td>
            <td><input type="number" value="2720.0"></td>
            <td><input type="number" value="1360.0"></td>
            <td><input type="number" value="1980.0"></td>
            <td><input type="number" value="2720.0"></td>
            <td><input type="number" value="2720.0"></td>
            <td><input type="number" value="2720.0"></td>
        </tr>
        <!-- Repite este bloque de tr según sea necesario hasta 6 filas -->
        <tr>
            <td></td>
            <td></td>
            <td>GASTO DE PERSONAL 3</td>
            <td><input type="number" value="153.0"></td>
            <td><input type="number" value="153.0"></td>
            <td><input type="number" value="153.0"></td>
            <td><input type="number" value="153.0"></td>
            <td><input type="number" value="153.0"></td>
            <td><input type="number" value="153.0"></td>
            <td><input type="number" value="153.0"></td>
            <td><input type="number" value="153.0"></td>
            <td><input type="number" value="153.0"></td>
            <td><input type="number" value="153.0"></td>
            <td><input type="number" value="1360.0"></td>
            <td><input type="number" value="1980.0"></td>
            <td><input type="number" value="2720.0"></td>
            <td><input type="number" value="1360.0"></td>
            <td><input type="number" value="1980.0"></td>
            <td><input type="number" value="2720.0"></td>
            <td><input type="number" value="2720.0"></td>
            <td><input type="number" value="2720.0"></td>
        </tr>
        <!-- Agrega más filas según sea necesario -->
    </tfoot>
    </table>

<script>
        $(document).ready(function() {
            var eess = "{{ $eess }}";  // Valor de 'eess' pasado desde el controlador
            
            // Realizar la solicitud AJAX para obtener los datos de la base de datos
            $.ajax({
                url: '/obtener-datos2',  // URL configurada en las rutas
                method: 'GET',
                data: { eess: eess },  // Enviar el valor de 'eess'
                success: function(data) {
                    console.log("Datos recibidos:", data);
                    
                    // Verificar si se recibieron datos
                    if (data && data.length > 0) {
                        var tableBody = $('#detallesTable tbody');
                        var i=0; 
                        tableBody.empty();  // Limpiar la tabla antes de agregar los nuevos resultados
                        
                        // Iterar sobre los resultados y agregar cada fila a la tabla
                        $.each(data, function(index, item) {
                            i++;
                            var rowClass = item.color == 1 ? 'fcate' : ''; 
                            var selectOptions = '';  // Inicializar las opciones del select

                            // Condicionalmente seleccionar la opción en el select basado en item.tipo
                            if (item.tipo === 1) {
                                selectOptions = '<option value="0"></option><option value="1" selected>Ineludible</option><option value="2">Otro Gasto Operativo</option>';
                            } else if (item.tipo === 2) {
                                selectOptions = '<option value="0"></option><option value="1">Ineludible</option><option value="2" selected >Otro Gasto Operativo</option>';
                            } else {
                                selectOptions = '<option value="0" selected></option><option value="1">Ineludible</option><option value="2">Otro Gasto Operativo</option>';
                            }
                            var newRow = '<tr id="f'+(i) + '" class="' + rowClass + '">' +
                                '<td><input id="f'+(i)+'-1" type="text" class="input-td" placeholder=" " value="'+(item.fondo_codigo || '') + '" ></td>' +
                                '<td id="f'+(i)+'-2">' + item.pofi_codigo + '</td>' +
                                '<td id="f'+(i)+'-3">' + item.pofi + '<button class="add-row-btn" onclick="addRow(this)">+</button><button class="del-row-btn" onclick="delRow(this)">x</button></td>' +
                                '<td><select id="f'+(i)+'-4">' + selectOptions + '</select></td>' +
                                '<td id="f'+(i)+'-5"><input type="number" value="' + item.estimacion + '" class="numegris"></td>' +
                                '<td id="f'+(i)+'-6"><input type="number" value="' + item.enero + '" class="numegris"></td>' +
                                '<td id="f'+(i)+'-7"><input type="number" value="' + item.febrero + '" class="numegris"></td>' +
                                '<td id="f'+(i)+'-8"><input type="number" value="' + item.marzo + '" class="numegris"></td>' +
                                '<td id="f'+(i)+'-9"><input type="number" value="' + item.abril + '" class="numegris"></td>' +
                                '<td id="f'+(i)+'-10"><input type="number" value="' + item.mayo + '" class="numegris"></td>' +
                                '<td id="f'+(i)+'-11"><input type="number" value="' + item.junio + '" class="numegris"></td>' +
                                '<td id="f'+(i)+'-12"><input type="number" value="' + item.julio + '" class="numegris"></td>' +
                                '<td id="f'+(i)+'-13"><input type="number" value="' + item.agosto + '" class="numegris"></td>' +
                                '<td id="f'+(i)+'-14"><input type="number" value="' + item.septiembre + '" class="numegris"></td>' +
                                '<td id="f'+(i)+'-15"><input type="number" value="' + item.octubre + '" class="numegris"></td>' +
                                '<td id="f'+(i)+'-16"><input type="number" value="' + item.noviembre + '" class="numegris"></td>' +
                                '<td id="f'+(i)+'-17"><input type="number" value="' + item.diciembre + '" class="numegris"></td>' +
                                '<td id="f'+(i)+'-18"><input type="number" value="' + item.total2026 + '" class="numegris"></td>' +
                                '<td id="f'+(i)+'-19"><input type="number" value="' + item.proy2027 + '" class="numegris"></td>' +
                                '<td id="f'+(i)+'-20"><input type="number" value="' + item.proy2028 + '" class="numegris"></td>' +
                                '<td id="f'+(i)+'-21"><input type="number" value="' + item.proy2029 + '" class="numegris"></td>' +
                            '</tr>';

                            tableBody.append(newRow);  // Agregar la nueva fila a la tabla
                        });
                    } else {
                        console.log("No se encontraron resultados.");
                    }
                },
                error: function(error) {
                    console.error("Error al obtener los datos:", error);
                }
            });
        });
    </script>

    
    </div>

    <!-- Contenedor de sugerencias que se va a mostrar debajo del input -->
    <div id="suggestions-container" class="suggestions" style="display: none;"></div>


    <div class="nota">
        Nota.-
        <BR>1. Precisar el nivel de prioridad, sea 1, 2, 3, …. Donde 1 es la actividad más prioritaria.
        <BR>2. Tipo de gasto: <I> ineludible, <O> Otro gasto operativo																


    </div>
<div id="loadingOverlay" style="display:none; position:fixed; top:0; left:0; width:100%; height:100%; 
    background-color:rgba(0,0,0,0.5); z-index:9999; color:white; font-size:2em; text-align:center; padding-top:20%;">
    Grabando...
</div>

<div class="footer">
    Sistema Nacional de Proyección Presupuestal - EsSALUD 2025
</div>

    <script>
        // Lista de opciones de texto con código y descripción
        const options = [
    "000101 CONSEJO DIRECTIVO",
    "000201 PRESIDENCIA EJECUTIVA",
    "000202 GESTIÓN DE PROYECTOS ESTRATÉGICOS",
    "000301 AUDITORIA INTERNA",
    "000401 SECRETARIA GENERAL",
    "000403 INICIATIVA PLAN NACIONAL DL.1310",
    "000601 OFICINA DE INTEGRIDAD",
    "000801 GERENCIA GENERAL",
    "000902 GESTION DE LA INVESTIGACION EN SALUD",
    "000903 INVESTIGACION EN SALUD",
    "000909 DESARROLLO DE LA INVESTIGACION",
    "001001 EQUIPO INFORMATICO",
    "001003 IMPLEMENTACION Y MANTEN. DE SISTEMAS",
    "001004 ADQUISICION DE SOFTWARE Y LICENCIAS",
    "001005 COMUNICACION Y REDES",
    "001006 GASTOS OPERATIVOS / MANT.EQUP.INFORMAT.",
    "001007 GERENCIA CENTRAL DE ORG. E INFORMATICA",
    "001012 Equipamiento Informatico Ligado Proyecto",
    "001013 ESSALUD EN LINEA PROVINCIAS",
    "001101 ASUNTOS JURIDICOS",
    "001102 DEFENSA LEGAL SERVIR",
    "001208 OCPGCI",
    "001209 Promoción y Gestión de Proyectos de Inve",
    "001210 LAUDOS ARBITRALES GCPGCI",
    "001301 PROGR.DE BIENEST.DE PERSONAL-UNIFORMES",
    "001302 CAPACITACION",
    "001304 CENTRO DE EDUCACION INICIAL",
    "001306 PENSIONES D.L. 20530",
    "001308 NAVIDAD",
    "001309 OTRAS ACTIVIDADES DE BIENESTAR",
    "001310 G.C.RECURSOS HUMANOS",
    "001313 GESTIÓN DEL RENDIMIENTO",
    "001315 ASIGNACION DICIEMBRE CAS",
    "001316 SEGURIDAD Y SALUD EN EL TRABAJO LEY29783",
    "001317 CELEBRACIONES",
    "001401 OFICINA GESTION DE LA CALIDAD",
    "001402 GESTION EN CALIDAD",
    "001501 COMISION RECAUDACION",
    "001503 RESERVAS-CONTINGENCIAS",
    "001506 FINANZAS",
    "001510 PROVISIONES",
    "001514 LAUDOS ARBITRALES Y CONCILIACIONES",
    "001601 SEGUROS",
    "001602 GERENCIA CENTRAL DE SEGUROS-AFESSALUD",
    "001605 OFICINA DE ASEGURAMIENTO SABOGAL",
    "001606 OFICINA DE ASEGURAMIENTO ALMENARA",
    "001607 OFICINA DE ASEGURAMIENTO LIMA",
    "001608 OFICINA DE ASEGURAMIENTO TUMBES",
    "001609 OFICINA DE ASEGURAMIENTO PIURA",
    "001610 OFICINA DE ASEGURAMIENTO LAMBAYEQUE",
    "001612 OFICINA DE ASEGURAMIENTO CAJAMARCA",
    "001613 OFICINA DE ASEGURAMIENTO AMAZONAS",
    "001615 OFICINA DE ASEGURAMIENTO LA LIBERTAD",
    "001616 OFICINA DE ASEGURAMIENTO ANCASH",
    "001618 OFICINA DE ASEGURAMIENTO AREQUIPA",
    "001620 OFICINA DE ASEGURAMIENTO MOQUEGUA",
    "001621 OFICINA DE ASEGURAMIENTO TACNA",
    "001622 OFICINA DE ASEGURAMIENTO PUNO",
    "001623 OFICINA DE ASEGURAMIENTO ICA",
    "001624 OFICINA DE ASEGURAMIENTO CUZCO",
    "001625 OFICINA DE ASEGURAMIENTO APURIMAC",
    "001626 OFICINA DE ASEGURAMIENTO MADRE DE DIOS",
    "001627 OFICINA DE ASEGURAMIENTO JUNIN",
    "001628 OFICINA DE ASEGURAMIENTO PASCO",
    "001629 OFICINA DE ASEGURAMIENTO HUANUCO",
    "001630 OFICINA DE ASEGURAMIENTO AYACUCHO",
    "001631 OFICINA DE ASEGURAMIENTO HUANCAVELICA",
    "001632 OFICINA DE ASEGURAMIENTO LORETO",
    "001633 OFICINA DE ASEGURAMIENTO UCAYALI",
    "001634 OFICINA DE ASEGURAMIENTO JULIACA",
    "001635 OFICINA DE ASEGURAMIENTO TARAPOTO",
    "001636 OFICINA DE ASEGURAMIENTO MOYOBAMBA",
    "001638 OFICINA DE ASEGURAMIENTO JAEN",
    "001640 G.C. DE SEGUROS Y PRESTACIONES ECONOMICA",
    "001642 CONVENIO RENIEC",
    "001705 G.C. DE OPERACIONES",
    "001706 OPERACIONES ESPECIALES",
    "001707 GESTION EN OPERACIONES",
    "001712 PLAN CONTING. ATEN. PAC. PATOLOG. CARDI.",
    "001713 Prevenir EsSalud",
    "001901 G.C. PERSONA ADULTA Y PERSONA DISCAPACID",
    "001902 GER.PERSONA ADULTA MAYOR Y PREST SOCIALE",
    "001903 GER.PERSONA CON DISCAPACIDAD",
    "002001 CENTRAL DE ABASTECIM. DE BIENES ESTRATE.",
    "002002 GESTION EN CEABE",
    "002005 RS.930 BIENES ESTRATEG. FENOMENO NIÑO",
    "002006 LAUDOS ARBITRALES CEABE",
    "002008 CENTRO NACIONAL DE TELEMEDICINA",
    "002009 ACTAS DE CONCILIACIÓN - CEABE",
    "002202 OFICINA DE DEFENSA NACIONAL",
    "002205 HOSPITAL PERU",
    "002207 PROGRAMAS ESPECIALES",
    "002212 PROGRAMA NACIONAL DE TRASPLANTES",
    "002238 PLAN DE CONTINGENCIA ANTE LLUVIAS 2023",
    "002501 ADMINIST. Y SANEAMIENTO INMOBILIARIO",
    "002503 CONTROL DEL SISTEMA PATRIMONIAL",
    "002507 GASTOS GENERALES-AFESSALUD",
    "002510 ALMACENES CENTRALES",
    "002511 SEGUROS PATRIMONIALES",
    "002601 ATENCIONES EN EL EXTERIOR",
    "002615 PRESTACIONES SOCIALES",
    "002616 GESTION EN SALUD",
    "002702 TRANSFERENCIA O.N.P. - PENSIONES",
    "002706 GERENCIA CENTRAL FINANZAS-AFESSALUD",
    "002709 INVERSIONES FINANCIERAS",
    "002801 GC. ATENCION AL ASEGURADO",
    "002802 G.DE PLATAFORMAS DE ATENCION AL ASEGURAD",
    "002803 SGSGAA - GC. ATEN. ASEGURADO",
    "002841 Atención al Asegurado en IPRESS",
    "003001 GERENCIA CENTRAL DE PRESTACIONES SALUD",
    "003002 PRESTACIONES ECONOMICAS",
    "003004 EQUIP. LIGADO A PROYECTOS DE INVERSION",
    "003005 EQUIPAMI. NO LIGADO A PROY.INVER CON CUI",
    "003006 PADOMI",
    "003008 ESCUELA DE EMERGENCIAS Y DESASTRES",
    "003009 SALUD OCUPACIONAL",
    "003010 SISTEMA DE TRANSPORTE ASISTIDO EMERGENC.",
    "003011 CAM REBAGLIATI- G.D.LIMA",
    "003012 CERP. LA VICTORIA - G.D.LIMA",
    "003013 CERP. CALLAO - G.D. LIMA",
    "003014 CAM ALMENARA -  G.D. LIMA",
    "003015 CAM SABOGAL -  LIMA",
    "003017 GERENCIA DE OFERTA FLEXIBLE",
    "003018 ESSALUD en Linea",
    "003023 EQ.ASIST.OTROS GAST. K SIN COD.UNI.INVER",
    "003034 UNIDADES DE PRESTACIONES ECONOMICAS PROV",
    "003035 APP ALMACENES",
    "003036 EPIDEMIA DENGUE",
    "003073 DELIVERY PADOMI",
    "003074 CENTRAL REGULA. DE URGENC.Y EMERG.NACION",
    "003079 EMERGENCIA COVID-19",
    "003084 EMERGENCIA COVID - 2021 - COMPRA CENTRAL",
    "003086 CEABE EMERGENCIA COVID-19 PROC.COMPLEME",
    "003108 PRESTACIONES SOCIALES TUMBES",
    "003109 PRESTACIONES SOCIALES PIURA",
    "003110 PRESTACIONES SOCIALES LAMBAYEQUE",
    "003112 PRESTACIONES SOCIALES CAJAMARCA",
    "003113 PRESTACIONES SOCIALES AMAZONAS",
    "003115 PRESTACIONES SOCIALES LA LIBERTAD",
    "003116 PRESTACIONES SOCIALES ANCASH",
    "003118 PRESTACIONES SOCIALES AREQUIPA",
    "003120 PRESTACIONES SOCIALES MOQUEGUA",
    "003121 PRESTACIONES SOCIALES TACNA",
    "003122 PRESTACIONES SOCIALES PUNO",
    "003123 PRESTACIONES SOCIALES ICA",
    "003124 PRESTACIONES SOCIALES CUZCO",
    "003125 PRESTACIONES SOCIALES APURIMAC",
    "003126 PRESTACIONES SOCIALES MADRE DE DIOS",
    "003127 PRESTACIONES SOCIALES JUNIN",
    "003128 PRESTACIONES SOCIALES PASCO",
    "003129 PRESTACIONES SOCIALES HUANUCO",
    "003130 PRESTACIONES SOCIALES AYACUCHO",
    "003131 PRESTACIONES SOCIALES HUANCAVELICA",
    "003132 PRESTACIONES SOCIALES LORETO",
    "003133 PRESTACIONES SOCIALES UCAYALI",
    "003134 PRESTACIONES SOCIALES JULIACA",
    "003135 PRESTACIONES SOCIALES TARAPOTO",
    "003136 PRESTACIONES SOCIALES MOYOBAMBA",
    "003140 PRESTACIONES SOCIALES JAEN",
    "003177 PRESTACIONES SOCIALES HUARAZ",
    "003401 GERENCIA CENTRAL DE LOGISTICA",
    "003502 OBRAS",
    "003503 EQUIPAMIENTO ADMINIST.SEDE CENTRAL",
    "003504 EQUIPAMIENTO ADMINIST.RED ASISTENCIAL",
    "003512 VEHICULOS ADMINISTRATIVOS",
    "003514 OTROS GASTOS DE CAPITAL NO ESTRATEGICO",
    "003516 INVIERTE.PE - IOARR",
    "003701 GC.PLANEAMIENTO Y PRESUPUESTO",
    "003702 ESTUDIOS DE PRE-INVERSION",
    "003704 ESTUDIOS DEFINITIVOS",
    "003706 MANTENIMIENTO Y REPARACION DE INFRAESTR.",
    "003707 MANTENIMIENTO Y CONSERVACION DE INFRAEST",
    "003708 MANTENIMIENTO Y REPARACION DE EQUIPOS",
    "003710 MANTENIMIENTO x EQUIPAMIENTO.PROY.INV",
    "003711 HONORARIOS GASTOS JURD-OSCE",
    "003802 ITINERANTES",
    "003901 OF.RELACIONES INSTITUCIONALES",
    "003902 ASUNTOS INTERNACIONALES",
    "003904 P.N.VOLUNTARIADO - FONDO SALUD",
    "003905 PROMOCION DE LOS SERVICIOS DE ESSALUD",
    "003908 CONVENIOS Y COMPROMISOS INTERNACIONALES",
    "004010 GERENCIA CENTRAL DE PROYECTOS DE INVERSI",
    "004502 GESTION DE PROYECTOS DE INVERS-EQUIPO",
    "005501 APP - OBRAS",
    "005502 APP - EQUIPAMIENTO",
    "005503 APP - OPERATIVO",
    "005604 INTERCAMBIO PRESTACIONAL DL.1302",
    "006002 LAUDOS ARBITRALES - REDES",
    "006003 RECONOCIMIENTO DE DEUDA - REDES",
    "008437 EMERGENCIA COVID COMP. CENTRAL.",
    "070768 COMPRA CENTRALIZADA",
    "080868 ACCIONES COMUNES",
    "090968 COMPRA CENTRALIZADA DELEGADA BIENES",
    "180100 ENFER.CRÓNI.NO TRASMIS.HIPERT.AR-DIAB-OB",
    "240100 ENFERMEDADES ONCOLÓGICAS",
    "770100 CARDIOVASCULAR",
    "790100 OTRAS INTERVENCIONES DE SALUD",
    "800400 ACCIONES COMUNES"
];


        // Función para mostrar sugerencias
function initializeSuggestions() {
    // Obtener todos los inputs con la clase 'input-td'
    const inputs = document.querySelectorAll('.input-td');

    inputs.forEach(input => {
        const suggestionsContainer = document.createElement('div'); // Crear un contenedor dinámico para cada input

        input.addEventListener("input", function() {
            const query = input.value.toLowerCase();
            suggestionsContainer.innerHTML = ""; // Limpiar las sugerencias anteriores

            if (query) {
                // Filtrar opciones que contengan el texto ingresado en el código o en la descripción
                const filteredOptions = options.filter(option => {
                    const [code, ...descriptionParts] = option.split(" ");
                    const description = descriptionParts.join(" ").toLowerCase();
                    return code.includes(query) || description.includes(query);
                });

                // Si hay opciones filtradas, se muestran
                if (filteredOptions.length > 0) {
                    suggestionsContainer.style.display = "block";
                    suggestionsContainer.classList.add('suggestions'); // Agregar clase de estilo

                    filteredOptions.forEach(option => {
                        const suggestionItem = document.createElement("div");
                        suggestionItem.classList.add("suggestion-item");
                        suggestionItem.textContent = option;

                        // Al hacer clic en una sugerencia, se selecciona el código
                        suggestionItem.addEventListener("click", function() {
                            // Extraer solo el código (antes del primer espacio)
                            const code = option.split(" ")[0];
                            input.value = code; // Solo mostrar el código en el input
                            suggestionsContainer.style.display = "none"; // Ocultar sugerencias después de seleccionar
                        });

                        suggestionsContainer.appendChild(suggestionItem);
                    });

                    // Calcular la posición del input y mostrar las sugerencias justo debajo
                    const inputRect = input.getBoundingClientRect();

                    // Ajustar la posición de las sugerencias
                    suggestionsContainer.style.left = `${inputRect.left + window.scrollX}px`; // Considera desplazamiento horizontal
                    suggestionsContainer.style.top = `${inputRect.bottom + window.scrollY}px`; // Considera desplazamiento vertical

                } else {
                    suggestionsContainer.style.display = "none"; // Ocultar si no hay coincidencias
                }
            } else {
                suggestionsContainer.style.display = "none"; // Ocultar si no se está escribiendo nada
            }

            // Colocar el contenedor de sugerencias en el DOM, justo debajo del input correspondiente
            document.body.appendChild(suggestionsContainer); // Asegúrate de que se agregue al body, no a un contenedor relativo
        });

        // Cerrar las sugerencias al hacer clic fuera del input o de las sugerencias
        document.addEventListener("click", function(event) {
            // Si el clic ocurre fuera del input y las sugerencias, las ocultamos
            if (!event.target.closest("input") && !event.target.closest(".suggestions")) {
                suggestionsContainer.style.display = "none"; // Ocultar el contenedor de sugerencias
            }
        });
    });
}

document.addEventListener('DOMContentLoaded', function() {
    initializeSuggestions();
});
    </script>

    <script>
function addRow(button) {
    var row = button.closest('tr');  // Obtener la fila donde se hizo clic
    var newRow = row.cloneNode(true); // Clonar la fila

    // Incrementar el id para cada nueva fila
    var i = document.querySelectorAll('tr').length + 1;

    // Verificar si la fila original tiene la clase 'cate'
    if (row.classList.contains('cate')) {
        // Si tiene la clase 'cate', eliminar los botones de agregar y borrar en la nueva fila
        var buttons = newRow.querySelectorAll('button');
        buttons.forEach(function(button) {
            button.style.display = 'none';  // Ocultar los botones
        });
    }

    // Limpiar los valores de los inputs de la nueva fila
    var inputs = newRow.querySelectorAll('input');
    inputs.forEach(function(input) {
        input.value = ''; // Limpiar el valor de cada input
    });

    // Modificar el id de la nueva fila con un contador
    newRow.id = 'f' + i;

    // Actualizar el id de cada input en la nueva fila
    newRow.querySelectorAll('input').forEach((input, index) => {
        input.id = 'f' + i + '-' + (index + 1); // Asignar ids únicos
    });

    // Asegurarse de que el select tenga la opción seleccionada correctamente
    var select = newRow.querySelector('select');
    var itemTipo = select.value;  // Aquí puedes ajustar según el valor 'item.tipo'

    // Condicional para seleccionar la opción en el select
    if (itemTipo == 1) {
        select.querySelector('option[value="1"]').selected = true;
    } else if (itemTipo == 2) {
        select.querySelector('option[value="2"]').selected = true;
    }

    row.parentNode.insertBefore(newRow, row.nextSibling);  // Insertar la nueva fila después de la original

    // Re-inicializar las sugerencias en la nueva fila
    initializeSuggestions();
}

function delRow(button) {
    var row = button.closest('tr');  // Obtener la fila donde se hizo clic
    row.parentNode.removeChild(row);  // Eliminar la fila
    //actualizarSumas();  
}

    </script>

    <script>
// Función para calcular las sumas acumulativas y actualizar las celdas
function actualizarSumas() {
    // Definir las reglas de las subsumas
    const reglasSuma = [
        //nivel 1
        { pofi_codigos: ['2510122023', '2510122024', '2510122183', '2510122184', '2510122193', '2510122194', '2510122203', '2510122204', '2510122213', '2510122214', '2510122223', '2510122224', '2510122253', '2510122254'], pofi_destino: '2510122000', },
        { pofi_codigos: ['2510132013', '2510132014', '2510132015'], pofi_destino: '2510132000', },
        { pofi_codigos: ['2510230100', '2510240100', '2510250100'], pofi_destino: '2510200000', },
        { pofi_codigos: ['2510325000', '2510304000', '2510306000', '2510307000', '2510308000', '2510309000', '2510310000', '2510311000', '2510313000', '2510314000', '2510318000', '2520250000', '2520257000', '2510320000'], pofi_destino: '2510300000', },
        { pofi_codigos: ['2520101000', '2520102000', '2520103000', '2520104000', '2520105000', '2520106000', '2520107000', '2520108000', '2520109000', '2520110000', '2520111000', '2520112000', '2520113000', '2520114000', '2520197000', '2520198000', '2520199000'], pofi_destino: '2520100000', },
        { pofi_codigos: ['2520224010','2520224020','2520224010','2520224030'],pofi_destino: '2520224000',},
        { pofi_codigos: ['2520224023'],pofi_destino: '2520224020',},
        { pofi_codigos: ['2520238001', '2520238002', '2520238003', '2520238004', '2520238005', '2520238007', '2520238008', '2520238009', '2520238011', '2520238013', '2520238014', '2520238015', '2520238016', '2520238017', '2520238019', '2520238021', '2520238022', '2520238025', '2520238026', '2520238099'], pofi_destino: '2520238000', },
        { pofi_codigos: ['2520240001', '2520240002', '2520240003', '2520240004'], pofi_destino: '2520240000', },
        { pofi_codigos: ['2520244001', '2520244002', '2520244003', '2520244004', '2520244005', '2520244006', '2520244009', '2520244010'], pofi_destino: '2520244000', },
        { pofi_codigos: ['2520238031'],pofi_destino: '2520238030',},
        { pofi_codigos: ['2520225010', '2520225020', '2520225030', '2520225040'], pofi_destino: '2520225000', },
        { pofi_codigos: ['2520404000'],pofi_destino: '2520400000',},
        { pofi_codigos: ['2520305000', '2520306000'],pofi_destino: '2520300000',},
        { pofi_codigos: ['2520252030'],pofi_destino: '2520252000',},
        { pofi_codigos: ['2520252011'],pofi_destino: '2520252010',},
        // NIVEL 2
        { pofi_codigos: ['2510101003', '2510101004', '2510103000', '2510103003', '2510103004', '2510104003', '2510104004', '2510105003', '2510105003', '2510110000', '2510110003', '2510110004', '2510111000', '2510111004', '2510112000', '2510112003', '2510112004', '2510113000', '2510113003', '2510113004', '2510114003', '2510114004', '2510115003', '2510115004', '2510116003', '2510118003', '2510120003', '2510126003', '2510126004', '2510127005', '2510131000', '2510131004', '2510136003', '2510137004', '2510140004', '2510122000', '2510122023'], pofi_destino: '2510100000', },
        { pofi_codigos: ['2520224000', '2520201000', '2520202000', '2520203000', '2520204000', '2520205000', '2520206000', '2520207000', '2520208000', '2520210000', '2520211000', '2520213000', '2520214000', '2520215000', '2520216000', '2520217000', '2520219000', '2520221000', '2520222000', '2520223000', '2520227000', '2520228000', '2520230000', '2520231000', '2520232000', '2520233000', '2520235000', '2520237000', '2520298000', '2520299000', '2520253000', '2520254000', '2520255000', '2520256000', '2520258000', '2520259000', '2520238000', '2520240000', '2520244000', '2520238030', '2520225000', '2520400000', '2520300000', '2520252000', '2520252010'], pofi_destino: '2520200000', },
        // NIVEL 3
        { pofi_codigos: ['2510100000', '2510200000', '2510300000'], pofi_destino: '2510000000', },
        { pofi_codigos: ['2520100000', '2520200000'], pofi_destino: '2520000000', },
        //NIVEL4
        { pofi_codigos: ['2510000000', '2520000000'], pofi_destino: '2500000000', },

    ];

    // Iterar sobre las reglas de suma
    reglasSuma.forEach(regla => {
        let suma = Array(13).fill(0); // Crear un array para almacenar las sumas de cada columna de 5 a 17

        // Recorrer las filas de la tabla para buscar las que coinciden con los 'pofi_codigos'
        $('#detallesTable tbody tr').each(function() {
            const pofi_codigo = $(this).find('td:eq(1)').text(); // Suponemos que 'id_pofi' está en la segunda columna

            // Verificar si la fila tiene un 'id_pofi' que coincide con los valores definidos en las reglas
            if (regla.pofi_codigos.includes(pofi_codigo)) {
                // Si coincide, sumar las columnas 5 a 17
                for (let i = 5; i <= 17; i++) {
                    const valor = parseInt($(this).find('td:eq(' + (i - 1) + ')').find('input').val()) || 0;
                    suma[i - 5] += valor; // Sumar el valor al índice correspondiente
                }
            }
        });

        // Asignar los resultados de la suma en las celdas correspondientes de la fila destino
        $('#detallesTable tbody tr').each(function() {
            const pofi_codigo = $(this).find('td:eq(1)').text(); // Obtener el 'id_pofi' de la fila

            if (pofi_codigo === regla.pofi_destino) {
                // Si la fila tiene el 'id_pofi' destino, actualizar las celdas con las sumas
                for (let i = 0; i < suma.length; i++) {
                    $(this).find('td:eq(' + (5 + i - 1) + ')').find('input').val(suma[i]); // Actualizar los valores en las celdas
                }
            }
        });
    });
}

// Llamar a la función actualizarSumas cada vez que se cambie un valor en los inputs
$('#detallesTable').on('input', 'input[type="number"]', function() {
    actualizarSumas(); // Actualizar las sumas al cambiar los valores
});

// Llamar a la función al cargar la página para aplicar las sumas iniciales
$(document).ready(function() {
    actualizarSumas();
});

        </script>

    <script>
        // Función para resaltar la fila y columna activa al hacer cambios
        const inputC = document.querySelectorAll('input[type="number"], select');

        inputC.forEach(input => {
            input.addEventListener('focus', () => {
                const row = input.closest('tr');
                
                // Verificar si la fila tiene la clase 'fcate'
                if (row.classList.contains('fcate')) {
                    return; // Salir si la fila tiene la clase 'fcate'
                }

                // Agregar la clase 'active' para iluminar la fila y la columna
                row.classList.add('active');

                // Resaltar la columna activa
                const cells = input.closest('table').rows;
                for (let i = 0; i < cells.length; i++) {
                    // Verificar que la celda no esté dentro de una fila con la clase 'fcate'
                    if (!cells[i].classList.contains('fcate') && cells[i].cells[input.closest('td').cellIndex]) {
                        cells[i].cells[input.closest('td').cellIndex].classList.add('active');
                    }
                }
            });

            input.addEventListener('blur', () => {
                const row = input.closest('tr');

                // Verificar si la fila tiene la clase 'fcate'
                if (row.classList.contains('fcate')) {
                    return; // Salir si la fila tiene la clase 'fcate'
                }

                // Eliminar la clase 'active' cuando se pierde el foco
                row.classList.remove('active');

                // Eliminar resalto de la columna activa
                const cells = input.closest('table').rows;
                for (let i = 0; i < cells.length; i++) {
                    // Verificar que la celda no esté dentro de una fila con la clase 'fcate'
                    if (!cells[i].classList.contains('fcate') && cells[i].cells[input.closest('td').cellIndex]) {
                        cells[i].cells[input.closest('td').cellIndex].classList.remove('active');
                    }
                }
            });
        });

    </script>

    <script>
    document.addEventListener('DOMContentLoaded', function() {
        const filaC = document.getElementById('fcate');
        if (filaC) {
            const inputC = filaC.querySelectorAll('input, select');
            inputC.forEach(function(input) {
                input.disabled = true; // Deshabilitar el input
            });
        } 
    });
</script>


<script>
    // Obtener todos los inputs con la clase 'numegris'
const inputG = document.querySelectorAll('.numegris');

// Función para cambiar el color de fondo según el valor del input
function changeColor() {
    inputG.forEach(input => {
        // Comprobar si el valor del input es 0
        if (input.value < 1) {
            // Si el valor es 0, el fondo es gris claro
            input.value="0";
            input.style.color = "#999"; // Gris claro
            input.classList.remove('not-zero'); // Eliminar la clase 'not-zero'
        } else {
            // Si el valor no es 0, el fondo es negro
            input.style.color = "#000"; // Negro
            input.classList.add('not-zero'); // Añadir la clase 'not-zero' para estilo negro
        }
    });
}

// Escuchar el evento 'input' en cada uno de los inputs
inputG.forEach(input => {
    input.addEventListener('input', changeColor);
});

// Llamar a la función una vez para aplicar el estilo inicial
changeColor();

</script>






<script>
$('#graba').click(function() {
    var eess = "{{ $eess }}";  // Este valor será el de tu backend en Laravel
    var filas = 0;
    var detalles = [];

    // Recoger los datos de la tabla (suponiendo que ya has recogido el array detalles)
    $('#detallesTable tbody tr').each(function() {
        var detalle = {
            x: $(this).find('td').eq(0).find('input').val(),
            y: $(this).find('td').eq(1).text(),
            z: $(this).find('td').eq(3).find('select').val(),
            a: $(this).find('td').eq(4).find('input').val(),
            b: $(this).find('td').eq(5).find('input').val(),
            c: $(this).find('td').eq(6).find('input').val(),
            d: $(this).find('td').eq(7).find('input').val(),
            e: $(this).find('td').eq(8).find('input').val(),
            f: $(this).find('td').eq(9).find('input').val(),
            g: $(this).find('td').eq(10).find('input').val(),
            h: $(this).find('td').eq(11).find('input').val(),
            i: $(this).find('td').eq(12).find('input').val(),
            j: $(this).find('td').eq(13).find('input').val(),
            k: $(this).find('td').eq(14).find('input').val(),
            l: $(this).find('td').eq(15).find('input').val(),
            m: $(this).find('td').eq(16).find('input').val(),
            n: $(this).find('td').eq(17).find('input').val(),
            o: $(this).find('td').eq(18).find('input').val(),
            p: $(this).find('td').eq(19).find('input').val(),
            q: $(this).find('td').eq(20).find('input').val()
        };

        detalles.push(detalle);
    });

    filas = detalles.length;

    // Verificar si hay al menos 4 filas y mostrar en consola el valor de `eess` y los detalles de la cuarta fila
    if (detalles.length > 3) {  // Asegurarse de que haya al menos 4 filas
        var fila = detalles[3];  // Acceder a la cuarta fila (índice 3)

        // Crear un string con el formato campo:valor-campo:valor-campo:valor...
        var valoresDetalles = Object.entries(fila)
            .map(([campo, valor]) => `${campo}:${valor}`)
            .join('\n');  // Unir los valores con guiones

        // Imprimir en consola los valores de eess y la cuarta fila con el formato solicitado
        console.log(`valor_de_eess: ${eess}\n` + valoresDetalles);  // Mostrar en consola
    }

    // Enviar los datos al servidor
    $('#loadingOverlay').fadeIn();
    $.ajax({
        url: '/grabar-datos',  // La ruta que ejecuta el método en el controlador
        method: 'POST',
        data: { 
            valor_de_eess: eess,
            filas: filas,
            detalle: detalles,
            _token: $('meta[name="csrf-token"]').attr('content')
        },
        success: function(response) {
            alert(response.message);  // Mostrar el mensaje de éxito
        },
        error: function(error) {
            console.error("Error al grabar los datos:", error);
            alert("Hubo un error al grabar los datos.");
        }
    });
});


    </script>

<script>
function AjustaAltura() {
    const alturaRestante = window.innerHeight - 220; // Restar 360px de la altura total
    document.querySelector('.detalle').style.height = `${alturaRestante}px`;
}

window.addEventListener('load',AjustaAltura);
window.addEventListener('resize',AjustaAltura);
</script>

    </script>

    <!-- El script debe ir al final del body -->
<script>
    // Función para bloquear el cambio de valor con las teclas de dirección
    document.querySelectorAll('input[type="number"]').forEach(input => {
        input.addEventListener('keydown', (event) => {
            // Prevenir el comportamiento predeterminado de las teclas de dirección
            if (event.key === 'ArrowUp' || event.key === 'ArrowDown') {
                event.preventDefault(); // Bloquea el cambio de valor
            }
        });
    });
</script>

</body>
</html>
